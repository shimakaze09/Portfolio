name: Automated Dependency Updates

on:
  schedule:
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['package.json', 'package-lock.json']

permissions:
  contents: write
  pull-requests: write

jobs:
  security-audit:
    name: Security Audit & Auto-fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        id: audit
        run: |
          if npm audit --audit-level=moderate; then
            echo "audit_status=clean" >> $GITHUB_OUTPUT
          else
            echo "audit_status=vulnerabilities" >> $GITHUB_OUTPUT
            npm audit --json > audit-report.json || true
          fi
      
      - name: Auto-fix vulnerabilities
        if: steps.audit.outputs.audit_status == 'vulnerabilities'
        run: |
          npm audit fix --force
          
          if git diff --exit-code package-lock.json; then
            echo "No fixes were applied"
            exit 0
          fi
      
      - name: Update outdated packages
        id: update
        run: |
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            
            npm update
            
            npx npm-check-updates -u
            npm install
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run tests after updates
        if: steps.audit.outputs.audit_status == 'vulnerabilities' || steps.update.outputs.updates_available == 'true'
        id: build_test
        run: |
          npm ci
          
          # Try to build and capture any errors
          if npm run build 2>&1 | tee build-output.log; then
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "Build completed successfully" >> build-summary.md
          else
            echo "build_status=failed" >> $GITHUB_OUTPUT
            echo "Build failed - checking for common fixes" >> build-summary.md
            
            # Check for Tailwind CSS PostCSS plugin issue
            if grep -q "tailwindcss.*PostCSS plugin" build-output.log; then
              echo "Detected Tailwind CSS PostCSS plugin issue - attempting fix" >> build-summary.md
              npm install @tailwindcss/postcss --save-dev
              
              # Update postcss.config.js if it exists
              if [ -f "postcss.config.js" ]; then
                sed -i "s/tailwindcss:/'@tailwindcss\/postcss':/g" postcss.config.js
                echo "Updated PostCSS configuration" >> build-summary.md
              fi
              
              # Try building again
              if npm run build; then
                echo "build_status=fixed" >> $GITHUB_OUTPUT
                echo "✅ Build fixed after Tailwind CSS PostCSS update" >> build-summary.md
              else
                echo "build_status=still_failed" >> $GITHUB_OUTPUT
                echo "❌ Build still failing after attempted fix" >> build-summary.md
              fi
            fi
          fi
      
      - name: Generate update summary
        if: steps.audit.outputs.audit_status == 'vulnerabilities' || steps.update.outputs.updates_available == 'true'
        run: |
          echo "## Dependency Update Summary" > update-summary.md
          echo "" >> update-summary.md
          
          if [ "${{ steps.audit.outputs.audit_status }}" == "vulnerabilities" ]; then
            echo "### 🔒 Security Fixes Applied" >> update-summary.md
            echo "Vulnerabilities were detected and automatically fixed." >> update-summary.md
            echo "" >> update-summary.md
          fi
          
          if [ "${{ steps.update.outputs.updates_available }}" == "true" ]; then
            echo "### 📦 Package Updates" >> update-summary.md
            echo "The following packages were updated:" >> update-summary.md
            echo "" >> update-summary.md
            
            git diff --name-only package*.json | head -10 >> update-summary.md
          fi
          
          echo "" >> update-summary.md
          echo "### ✅ Build Status" >> update-summary.md
          
          # Include build summary if it exists
          if [ -f "build-summary.md" ]; then
            cat build-summary.md >> update-summary.md
          else
            echo "Build completed successfully after updates." >> update-summary.md
          fi
          
          # Add error logs if build failed
          if [ "${{ steps.build_test.outputs.build_status }}" == "still_failed" ] && [ -f "build-output.log" ]; then
            echo "" >> update-summary.md
            echo "### ⚠️ Build Error Details" >> update-summary.md
            echo "```" >> update-summary.md
            tail -50 build-output.log >> update-summary.md
            echo "```" >> update-summary.md
          fi
      
      - name: Create Pull Request
        if: steps.audit.outputs.audit_status == 'vulnerabilities' || steps.update.outputs.updates_available == 'true'
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: automated dependency updates
            
            - Security vulnerabilities fixed
            - Outdated packages updated
            ${{ steps.build_test.outputs.build_status == 'fixed' && '- Build fixes applied automatically' || '- Build verified successful' }}
          title: "${{ steps.build_test.outputs.build_status == 'still_failed' && '🚨 Dependency Updates (Build Issues)' || '🔄 Automated Dependency Updates' }}"
          body-path: update-summary.md
          branch: automated-dependency-updates
          delete-branch: true
          labels: |
            dependencies
            security
            automated
            ${{ steps.build_test.outputs.build_status == 'still_failed' && 'needs-review' || '' }}
          reviewers: |
            ${{ github.repository_owner }}

  check-npm-advisories:
    name: Check NPM Security Advisories
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit and upload results
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.4.0
        if: always()
        with:
          name: npm-audit-report
          path: |
            audit-report.json
            outdated.json
          retention-days: 30
      
      - name: Run npm audit for security
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
        continue-on-error: true
      
      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.4.0
        with:
          name: npm-audit-results
          path: npm-audit-results.json
          retention-days: 30